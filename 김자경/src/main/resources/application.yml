# 기존 application.properties 방식
#spring.datasource.hikari.driver-class-name=com.mysql.cj.jdbc.Driver
#spring.datasource.hikari.jdbc-url=jdbc:mysql://localhost:3306/jpa?serverTimezone=Asia/Seoul&useUnicode=true&characterEncoding=utf8&useSSL=false&allowPublicKeyRetrieval=true
#spring.datasource.hikari.username=user
#spring.datasource.hikari.password=user
#
#spring.devtools.livereload.enabled=true
#
#spring.jpa.database=mysql
#spring.jpa.database-platform=org.hibernate.dialect.MySQL5InnoDBDialect
#spring.jpa.generate-ddl=true
#spring.jpa.hibernate.ddl-auto=create
#spring.jpa.open-in-view=false
#spring.jpa.show-sql=true
#spring.jpa.properties.hibernate.format_sql=true
#spring.jpa.properties.hibernate.use_sql_comments=true

spring:
  datasource:
    # 실 배포할 때 DB 관련한 중요한 정보는 환경변수로 등록한다음 불러오자
    url: ${DB_JDBC_URL}
    username: ${DB_USER}
    password: ${DB_PASSWORD}
    driver-class-name: com.mysql.cj.jdbc.Driver
  jpa:
    database: mysql
    database-platform: org.hibernate.dialect.MySQL5InnoDBDialect
    hibernate:
      ddl-auto: create # create(서버 시작시 테이블 생성, 데이터 유지 x), create-drop(create와 동일하되 서버 종료시 테이블 삭제, 데이터 유지 x), none(아무일도 없었다, 데이터 유지됨), update(수정 사항 변경, 데이터 유지됨), validate(엔티티와 검증만, 데이터 유지됨)
    show-sql: true # ORM으로 요청한 쿼리문 로그로 보이기
    properties:
      hibernate:
        format_sql: true # sql문 가독성있게 보이기
        use_sql_comments: true # sql문 주석 보이기
    defer-datasource-initialization: true # data.sql을 사용하여 Hibernate에 의해 생성된 스키마에 데이터 추가
  sql:
    init:
      mode: always # ALWAYS: 모든 데이터베이스에 sql 스크립트를 동작시킨다.


